root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"B25002_001E", # Estimate of total housing units
"B25002_003E", # Number of vacant housing units
"B19013_001E", # Median HH Income ($)
"B02001_002E", # People describing themselves as "white alone"
"B06009_006E") # Total graduate or professional degree
acsTractsPHL.2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
st_transform('ESRI:102729')
nhoods <-
st_read("E:/Downloads/studentData.geojson") %>%
st_transform('ESRI:102729')
to_predict <-
nhoods %>%
dplyr::filter(toPredict == 'CHALLENGE') #Select data for later prediction
#??
#Philadelphia <-
# read.csv(file.path(root.dir,"/Chapter3_4/bostonHousePriceData_clean.csv"))
# Load crime data
philadelphiCrimes <- read.csv('E:/Downloads/Philadelphia_crime.csv')
# Create sf and select Weapon Violations
philadelphiCrimes.sf <-
philadelphiCrimes %>%
filter(text_general_code == "Weapon Violations",
lat > -1) %>%
dplyr::select(lat, lng) %>%
na.omit() %>%
st_as_sf(coords = c( "lng","lat"), crs = "EPSG:4326") %>%
st_transform('ESRI:102729') %>%
distinct()
# Load 311 data
philadelphia311 <- read.csv('E:/Downloads/public_cases_fc.csv') %>%
dplyr::select(lat, lon) %>%
na.omit() %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102729')
philadelphia311 <- read.csv('https://phl.carto.com/api/v2/sql?filename=public_cases_fc&format=csv&skipfields=cartodb_id,the_geom,the_geom_webmercator&q=SELECT%20*%20FROM%20public_cases_fc%20WHERE%20requested_datetime%20%3E=%20%272022-01-01%27%20AND%20requested_datetime%20%3C%20%272023-01-01%27') %>%
dplyr::select(lat, lon) %>%
na.omit() %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102729')
nhoods <-
st_read("E:/Downloads/studentData.geojson") %>%
st_transform('ESRI:102729')
to_predict <-
nhoods %>%
dplyr::filter(toPredict == 'CHALLENGE') #Select data for later prediction
#??
#Philadelphia <-
# read.csv(file.path(root.dir,"/Chapter3_4/bostonHousePriceData_clean.csv"))
# Load crime data
philadelphiCrimes <- read.csv('https://raw.githubusercontent.com/ObjQIAN/MUSA-508-Midterm/main/data/Philadelphia_crime.csv')
# Create sf and select Weapon Violations
philadelphiCrimes.sf <-
philadelphiCrimes %>%
filter(text_general_code == "Weapon Violations",
lat > -1) %>%
dplyr::select(lat, lng) %>%
na.omit() %>%
st_as_sf(coords = c( "lng","lat"), crs = "EPSG:4326") %>%
st_transform('ESRI:102729') %>%
distinct()
# Load 311 data
philadelphia311 <- read.csv('https://phl.carto.com/api/v2/sql?filename=public_cases_fc&format=csv&skipfields=cartodb_id,the_geom,the_geom_webmercator&q=SELECT%20*%20FROM%20public_cases_fc%20WHERE%20requested_datetime%20%3E=%20%272022-01-01%27%20AND%20requested_datetime%20%3C%20%272023-01-01%27') %>%
dplyr::select(lat, lon) %>%
na.omit() %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102729')
View(nhoods)
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"PricePerSq"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods %>%  dplyr::filter(sale_price != NA), aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"PricePerSq"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods %>%  dplyr::select_if(x, is.numeric), aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"PricePerSq"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods %>%  dplyr::select_if(sale_price, is.numeric), aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"PricePerSq"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
sum(str_detect(nhoods$sale_price, ' partial_string '))
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods %>%  drop_na(), aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"PricePerSq"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods %>%  drop_na(), aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
#labels=qBr(nhoods,"PricePerSq"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
#labels=qBr(nhoods,"PricePerSq"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"sale_price"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods$sale_price),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(c(nhoods$sale_price)),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"sale_price"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"sale_price"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .35) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"sale_price"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .35) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"sale_price"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# Counts of crime per buffer of house sale
nhoods$crimes.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(philadelphiCrimes.sf, counter = 1),., sum) %>%
pull(counter)
## Nearest Neighbor Feature
nhoods <-
nhoods %>%
mutate(
crime_nn1 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 1),
crime_nn2 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 2),
crime_nn3 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 3),
crime_nn4 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 4),
crime_nn5 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 5))
## Plot assault density
ggplot() + geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(philadelphiCrimes.sf)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_gradient(low = "#25CB10", high = "#FA7800", name = "Density") +
scale_alpha(range = c(0.00, 0.35), guide = "none") +
labs(title = "Density of WA, PHL") +
mapTheme()
numericVars <-
select_if(st_drop_geometry(nhoods), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
numericVars %>%
correlate() %>%
autoplot() +
geom_text(aes(label = round(r,digits=2)),size = 2)
View(numericVars)
numericVars <-
select_if(st_drop_geometry(nhoods), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
# yet another way to plot the correlation plot using the corrr library
numericVars %>%
correlate() %>%
autoplot() +
geom_text(aes(label = round(r,digits=2)),size = 2)
numericVars <-
select_if(st_drop_geometry(nhoods), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
#有无穷或遗漏值？
# yet another way to plot the correlation plot using the corrr library
#numericVars %>%
#  correlate() %>%
#  autoplot() +
#  geom_text(aes(label = round(r,digits=2)),size = 2)
git https://github.com/ObjQIAN/MUSA-508-Midterm
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"B25002_001E", # Estimate of total housing units
"B25002_003E", # Number of vacant housing units
"B19013_001E", # Median HH Income ($)
"B02001_002E", # People describing themselves as "white alone"
"B06009_006E") # Total graduate or professional degree
acsTractsPHL.2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
st_transform('ESRI:102729')
nhoods <-
st_read("E:/Downloads/studentData.geojson") %>%
st_transform('ESRI:102729')
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"B25002_001E", # Estimate of total housing units
"B25002_003E", # Number of vacant housing units
"B19013_001E", # Median HH Income ($)
"B02001_002E", # People describing themselves as "white alone"
"B06009_006E") # Total graduate or professional degree
acsTractsPHL.2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
st_transform('ESRI:102729')
nhoods <-
st_read("D:/Upenn/23fall/MUSA5080 Public Policy Analysis/midterm 4-5/studentData.geojson") %>%
st_transform('ESRI:102729')
to_predict <-
nhoods %>%
dplyr::filter(toPredict == 'CHALLENGE') #Select data for later prediction
#??
#Philadelphia <-
# read.csv(file.path(root.dir,"/Chapter3_4/phillyHousePriceData_clean.csv"))
# Load crime data
philadelphiCrimes <- read.csv('https://raw.githubusercontent.com/ObjQIAN/MUSA-508-Midterm/main/data/Philadelphia_crime.csv')
# Create sf and select Weapon Violations
philadelphiCrimes.sf <-
philadelphiCrimes %>%
filter(text_general_code == "Weapon Violations",
lat > -1) %>%
dplyr::select(lat, lng) %>%
na.omit() %>%
st_as_sf(coords = c( "lng","lat"), crs = "EPSG:4326") %>%
st_transform('ESRI:102729') %>%
distinct()
# Load 311 data
philadelphia311 <- read.csv('https://phl.carto.com/api/v2/sql?filename=public_cases_fc&format=csv&skipfields=cartodb_id,the_geom,the_geom_webmercator&q=SELECT%20*%20FROM%20public_cases_fc%20WHERE%20requested_datetime%20%3E=%20%272022-01-01%27%20AND%20requested_datetime%20%3C%20%272023-01-01%27') %>%
dplyr::select(lat, lon) %>%
na.omit() %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102729')
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = nhoods, aes(colour = q5(sale_price)),
show.legend = "point", size = .35) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"sale_price"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# Counts of crime per buffer of house sale
nhoods$crimes.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(philadelphiCrimes.sf, counter = 1),., sum) %>%
pull(counter)
## Nearest Neighbor Feature
nhoods <-
nhoods %>%
mutate(
crime_nn1 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 1),
crime_nn2 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 2),
crime_nn3 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 3),
crime_nn4 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 4),
crime_nn5 = nn_function(st_coordinates(nhoods),
st_coordinates(philadelphiCrimes.sf), k = 5))
## Plot assault density
ggplot() + geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(philadelphiCrimes.sf)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_gradient(low = "#25CB10", high = "#FA7800", name = "Density") +
scale_alpha(range = c(0.00, 0.35), guide = "none") +
labs(title = "Density of WA, PHL") +
mapTheme()
## Home Features cor
st_drop_geometry(nhoods) %>%
mutate(Age = 2022 - year_built) %>%
dplyr::select(sale_price, total_livable_area, Age, crimes.Buffer) %>%
filter(sale_price <= 1000000, Age < 500) %>%
gather(Variable, Value, -sale_price) %>%
ggplot(aes(Value, sale_price)) +
geom_point(size = .5) + geom_smooth(method = "lm", se=F, colour = "#FA7800") +
facet_wrap(~Variable, ncol = 3, scales = "free") +
labs(title = "Price as a function of continuous variables") +
plotTheme()
## Crime cor
nhoods %>%
st_drop_geometry() %>%
mutate(Age = 2022 - year_built) %>%
dplyr::select(sale_price, starts_with("crime_")) %>%
filter(sale_price <= 1000000) %>%
gather(Variable, Value, -sale_price) %>%
ggplot(aes(Value, sale_price)) +
geom_point(size = .5) + geom_smooth(method = "lm", se=F, colour = "#FA7800") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of continuous variables") +
plotTheme()
nhoods %>%
st_drop_geometry() %>%
mutate(Age = 2022 - year_built) %>%
dplyr::select(sale_price, starts_with("crime_")) %>%
filter(sale_price <= 1000000) %>%
gather(Variable, Value, -sale_price) %>%
ggplot(aes(Value, sale_price)) +
geom_point(size = .5) + geom_smooth(method = "lm", se=F, colour = "#FA7800") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of continuous variables") +
plotTheme()
numericVars <-
select_if(st_drop_geometry(nhoods), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#25CB10", "white", "#FA7800"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
#有无穷或遗漏值？
# yet another way to plot the correlation plot using the corrr library
#numericVars %>%
#  correlate() %>%
#  autoplot() +
#  geom_text(aes(label = round(r,digits=2)),size = 2)
nhoods %>%
st_drop_geometry() %>%
mutate(Age = 2022 - year_built) %>%
dplyr::select(sale_price, starts_with("crime_")) %>%
filter(sale_price <= 1000000) %>%
gather(Variable, Value, -sale_price) %>%
ggplot(aes(Value, sale_price)) +
geom_point(size = .5) + geom_smooth(method = "lm", se=F, colour = "#FA7800") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of continuous variables") +
plotTheme()
View(nhoods)
