filter(sale_price <= 2000000, total_livable_area < 10000, total_livable_area > 0)
Crime1Reg <- lm(sale_price ~ crime_nn1, data = philly_sub_200k)
summary(Crime1Reg)
Crime2Reg <- lm(sale_price ~ crime_nn2, data = philly_sub_200k)
summary(Crime2Reg)
Crime3Reg <- lm(sale_price ~ crime_nn3, data = philly_sub_200k)
summary(Crime3Reg)
Crime4Reg <- lm(sale_price ~ crime_nn4, data = philly_sub_200k)
summary(Crime4Reg)
Crime5Reg <- lm(sale_price ~ crime_nn5, data = philly_sub_200k)
summary(Crime5Reg)
reg1 <- lm(sale_price ~ ., data = philly_sub_200k %>%
dplyr::select(sale_price, Age, total_livable_area, crime_nn3, philly311.Buffer,
fireplaces, interior_condition, number_of_bathrooms, number_of_bedrooms, number_stories))
summary(reg1)
reg1 <- lm(sale_price ~ ., data = philly_sub_200k %>%
dplyr::select(sale_price, total_livable_area, crime_nn3, philly311.Buffer,
fireplaces, interior_condition, number_of_bathrooms, number_of_bedrooms, number_stories))
summary(reg1)
reg1 <- lm(sale_price ~ ., data = philly_sub_200k %>%
dplyr::select(sale_price, Age, total_livable_area, crime_nn3, philly311.Buffer,
fireplaces, interior_condition, number_of_bathrooms, number_of_bedrooms, number_stories))
summary(reg1)
cor.test(philly_sub_200k$total_livable_area,
philly_sub_200k$sale_price,
method = "pearson")
cor.test(philly_sub_200k$Age,
philly_sub_200k$sale_price,
method = "pearson")
cor.test(philly_sub_200k$crime_nn3,
philly_sub_200k$sale_price,
method = "pearson")
ggscatter(philly_sub_200k$philly311.Buffer,
x = "total_livable_area",
y = "sale_price",
add = "reg.line") +
stat_cor(label.y = 2500000)
# the result above is too similar, So we calculate and compare the R^2 to choose which crime data to use.
# The result shows that crime_nn3 is the best one.
to_train <- to_train %>%
mutate(Age = 2022 - year_built)
philly_sub_200k <- st_drop_geometry(to_train) %>%
filter(sale_price <= 2000000, total_livable_area < 10000, total_livable_area > 0)
Crime1Reg <- lm(sale_price ~ crime_nn1, data = philly_sub_200k)
summary(Crime1Reg)
Crime2Reg <- lm(sale_price ~ crime_nn2, data = philly_sub_200k)
summary(Crime2Reg)
Crime3Reg <- lm(sale_price ~ crime_nn3, data = philly_sub_200k)
summary(Crime3Reg)
Crime4Reg <- lm(sale_price ~ crime_nn4, data = philly_sub_200k)
summary(Crime4Reg)
Crime5Reg <- lm(sale_price ~ crime_nn5, data = philly_sub_200k)
summary(Crime5Reg)
cor.test(philly_sub_200k$total_livable_area,
philly_sub_200k$sale_price,
method = "pearson")
cor.test(philly_sub_200k$Age,
philly_sub_200k$sale_price,
method = "pearson")
cor.test(philly_sub_200k$crime_nn3,
philly_sub_200k$sale_price,
method = "pearson")
ggscatter(philly_sub_200k$philly311.Buffer,
x = "total_livable_area",
y = "sale_price",
add = "reg.line") +
stat_cor(label.y = 2500000)
reg1 <- lm(sale_price ~ ., data = philly_sub_200k %>%
dplyr::select(sale_price, Age, total_livable_area, crime_nn3, philly311.Buffer,
fireplaces, interior_condition, number_of_bathrooms, number_of_bedrooms, number_stories))
summary(reg1)
## Plot of marginal response
effect_plot(reg1, pred = ., data = philly_sub_200k %>%
dplyr::select(sale_price, Age, total_livable_area, crime_nn3, philly311.Buffer,
fireplaces, interior_condition, number_of_bathrooms, number_of_bedrooms, number_stories) interval = TRUE, plot.points = TRUE)
## Plot of marginal response
effect_plot(reg1, pred = ., data = philly_sub_200k %>%
dplyr::select(sale_price, Age, total_livable_area, crime_nn3, philly311.Buffer,
fireplaces, interior_condition, number_of_bathrooms, number_of_bedrooms, number_stories) ,
interval = TRUE, plot.points = TRUE)
## Plot of marginal response
effect_plot(reg1,
pred = c("total_livable_area", "Age", "crime_nn3", "philly311.Buffer",
"fireplaces", "interior_condition", "number_of_bathrooms",
"number_of_bedrooms", "number_stories"),
interval = TRUE,
plot.points = TRUE)
View(reg1)
coords.test <-  st_coordinates(philly.test)
coords <- st_coordinates(philly.test)
# Remove invalid predictions (Maybe need to do this before running the test)
philly.test <-  philly.test[!with(philly.test,is.na(sale_price.Predict)),]
inTrain <- createDataPartition(
y = paste(to_train$building_code_description, to_train$quality_grade),
p = .60, list = FALSE)
philly.training <- to_train[inTrain,]
philly.test <- to_train[-inTrain,]
reg.training <-
lm(sale_price ~ ., data = as.data.frame(philly.training) %>%
dplyr::select(sale_price, total_livable_area, crimes.Buffer))
philly.test <-
philly.test %>%
mutate(Regression = "Baseline Regression",
sale_price.Predict = predict(reg.training, philly.test),
sale_price.Error = sale_price.Predict - sale_price,
sale_price.AbsError = abs(sale_price.Predict - sale_price),
sale_price.APE = (abs(sale_price.Predict - sale_price)) / sale_price.Predict)%>%
filter(sale_price < 5000000)
# Remove invalid predictions (Maybe need to do this before running the test)
philly.test <-  philly.test[!with(philly.test,is.na(sale_price.Predict)),]
coords <- st_coordinates(philly.test)
neighborList <- knn2nb(knearneigh(coords, 5))
spatialWeights <- nb2listw(neighborList, style="W")
philly.test$lagPrice <- lag.listw(spatialWeights, philly.test$sale_price)
coords.test <-  st_coordinates(philly.test)
neighborList.test <- knn2nb(knearneigh(coords.test, 5))
spatialWeights.test <- nb2listw(neighborList.test, style="W")
ggplot() +
geom_point(data = philly.test, aes(x = lagPrice, y = sale_price), size = 2) +
geom_smooth(data = philly.test, aes(x = lagPrice, y = sale_price), method = "lm", se = F, colour = "#FA7800") +
labs(title = "Price as a function of the spatial lag of price",
x = "Spatial Lag of Price (Mean price of 5 nearest neighbors)",
y = "Sale Price")
philly.test %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, sale_price.Error)) %>%
ggplot()+
geom_point(aes(x =lagPriceError, y =sale_price.Error)) +
geom_smooth(aes(x = lagPriceError, y = sale_price.Error),method = "lm", se=F, colour = "#FA7800") +
labs(title = "Error as a function of the spatial lag of price",
x = "Spatial Lag of Error (Mean error of 5 nearest neighbors)", y = "Sale Price")
moranTest <- moran.mc(philly.test$sale_price.Error,
spatialWeights.test, nsim = 999)
ggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +
geom_histogram(binwidth = 0.01) +
geom_vline(aes(xintercept = moranTest$statistic), colour = "#FA7800",size=1) +
scale_x_continuous(limits = c(-1, 1)) +
labs(title="Observed and permuted Moran's I",
subtitle= "Observed Moran's I in orange",
x="Moran's I",
y="Count") +
plotTheme()
coords.test <-  st_coordinates(philly.test)
neighborList.test <- knn2nb(knearneigh(coords.test, 5))
spatialWeights.test <- nb2listw(neighborList.test, style="W")
ggplot() +
geom_point(data = philly.test, aes(x = lagPrice, y = sale_price), size = 2) +
geom_smooth(data = philly.test, aes(x = lagPrice, y = sale_price), method = "lm", se = F, colour = "#FA7800") +
labs(title = "Price as a function of the spatial lag of price",
x = "Spatial Lag of Price (Mean price of 5 nearest neighbors)",
y = "Sale Price")
philly.test %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, sale_price.Error)) %>%
ggplot()+
geom_point(aes(x =lagPriceError, y =sale_price.Error)) +
geom_smooth(aes(x = lagPriceError, y = sale_price.Error),method = "lm", se=F, colour = "#FA7800") +
labs(title = "Error as a function of the spatial lag of price",
x = "Spatial Lag of Error (Mean error of 5 nearest neighbors)", y = "Sale Price")
moranTest <- moran.mc(philly.test$sale_price.Error,
spatialWeights.test, nsim = 999)
ggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +
geom_histogram(binwidth = 0.01) +
geom_vline(aes(xintercept = moranTest$statistic), colour = "#FA7800",size=1) +
scale_x_continuous(limits = c(-1, 1)) +
labs(title="Observed and permuted Moran's I",
subtitle= "Observed Moran's I in orange",
x="Moran's I",
y="Count") +
plotTheme()
philly.test %>%
as.data.frame() %>%
# Tract is not a good factor here
group_by(zip_code) %>%
summarize(meanPrediction = mean(sale_price.Predict),
meanPrice = mean(sale_price)) %>%
kable() %>%
kable_styling()
reg.nhood <- lm(sale_price ~ ., data = as.data.frame(philly.training) %>%
dplyr::select(zip_code, sale_price,
total_livable_area, crimes.Buffer))
philly.test.nhood <-
philly.test %>%
mutate(Regression = "Neighborhood Effects",
sale_price.Predict = predict(reg.nhood, philly.test),
sale_price.Error = sale_price.Predict- sale_price,
sale_price.AbsError = abs(sale_price.Predict- sale_price),
sale_price.APE = (abs(sale_price.Predict- sale_price)) / sale_price)%>%
filter(sale_price < 5000000)
bothRegressions <-
rbind(
dplyr::select(philly.test, starts_with("sale_price"), Regression, zip_code) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, sale_price.Error)),
dplyr::select(philly.test.nhood, starts_with("sale_price"), Regression, zip_code) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, sale_price.Error)))
st_drop_geometry(bothRegressions) %>%
gather(Variable, Value, -Regression, -zip_code) %>%
filter(Variable == "sale_price.AbsError" | Variable == "sale_price.APE") %>%
group_by(Regression, Variable) %>%
summarize(meanValue = mean(Value, na.rm = T)) %>%
spread(Variable, meanValue) %>%
kable()
bothRegressions %>%
dplyr::select(sale_price.Predict, sale_price, Regression) %>%
ggplot(aes(sale_price, sale_price.Predict)) +
geom_point() +
stat_smooth(aes(sale_price, sale_price.Predict),
method = "lm", se = FALSE, size = 1, colour="#FA7800") +
stat_smooth(aes(sale_price.Predict, sale_price),
method = "lm", se = FALSE, size = 1, colour="#25CB10") +
facet_wrap(~Regression) +
labs(title="Predicted sale price as a function of observed price",
subtitle="Orange line represents a perfect prediction; Green line represents prediction") +
plotTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, sale_price) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
left_join(philly.test, by = c(#有问题"Name" = "neighborhood")) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = 0.5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
View(bothRegressions)
st_drop_geometry(bothRegressions) %>%
group_by(Regression, sale_price) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
left_join(philly.test, by = c("zip_code" = "zipcode")) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = 0.5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, sale_price) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
left_join(philly.test, by = "zip_code" ) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = 0.5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
tracts20 <-
get_acs(geography = "tract", variables = c("B25026_001E","B02001_002E","B19013_001E"),
year=2020, state=42, county=101, geometry=TRUE, output="wide") %>%
st_transform('ESRI:102729') %>%
rename(TotalPop = B25026_001E,
NumberWhites =B02001_002E,
Median_Income = B19013_001E) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "Majority White", "Majority Non-White"),
incomeContext = ifelse(Median_Income > 32322, "High Income", "Low Income"))
grid.arrange(ncol = 2,
ggplot() + geom_sf(data = na.omit(tracts20), aes(fill = raceContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Race Context") +
labs(title = "Race Context") +
mapTheme() + theme(legend.position="bottom"),
ggplot() + geom_sf(data = na.omit(tracts20), aes(fill = incomeContext)) +
scale_fill_manual(values = c("#25CB10", "#FA7800"), name="Income Context") +
labs(title = "Income Context") +
mapTheme() +
theme(legend.position="bottom"))
st_join(bothRegressions, tracts17) %>%
filter(!is.na(incomeContext)) %>%
group_by(Regression, incomeContext) %>%
summarize(mean.MAPE = scales::percent(mean(SalePrice.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(incomeContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood income context")
st_join(bothRegressions, tracts20) %>%
filter(!is.na(incomeContext)) %>%
group_by(Regression, incomeContext) %>%
summarize(mean.MAPE = scales::percent(mean(SalePrice.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(incomeContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood income context")
st_join(bothRegressions, tracts20) %>%
filter(!is.na(incomeContext)) %>%
group_by(Regression, incomeContext) %>%
summarize(mean.MAPE = scales::percent(mean(sale_price.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(incomeContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood income context")
st_drop_geometry(bothRegressions) %>%
group_by(Regression, sale_price) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
left_join(philly.test, by = "zip_code" ) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = 0.5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
View(philly.test)
st_drop_geometry(bothRegressions) %>%
group_by(Regression, sale_price) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
left_join(philly.test, by = "zip_code" ) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = 0.5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, sale_price) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = 0.5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = 0.5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip_code) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = T)) %>%
ungroup() %>%
left_join(nhoods) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip_code) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = T)) %>%
ungroup() %>%
left_join(to_train) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip_code) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = T)) %>%
ungroup() %>%
left_join(to_train) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .5) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip_code) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = T)) %>%
ungroup() %>%
left_join(to_train) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .1) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip_code) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = T)) %>%
ungroup() %>%
left_join(to_train) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .1) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
View(acsTractsPHL.2020)
reg.nhood <- lm(sale_price ~ ., data = as.data.frame(philly.training) %>%
dplyr::select(zip_code, sale_price,
total_livable_area, crimes.Buffer))
philly.test.nhood <-
philly.test %>%
mutate(Regression = "Neighborhood Effects",
sale_price.Predict = predict(reg.nhood, philly.test),
sale_price.Error = sale_price.Predict- sale_price,
sale_price.AbsError = abs(sale_price.Predict- sale_price),
sale_price.APE = (abs(sale_price.Predict- sale_price)) / sale_price)%>%
filter(sale_price < 5000000)
bothRegressions <-
rbind(
dplyr::select(philly.test, starts_with("sale_price"), Regression, zip_code) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, sale_price.Error)),
dplyr::select(philly.test.nhood, starts_with("sale_price"), Regression, zip_code) %>%
mutate(lagPriceError = lag.listw(spatialWeights.test, sale_price.Error)))
st_drop_geometry(bothRegressions) %>%
gather(Variable, Value, -Regression, -zip_code) %>%
filter(Variable == "sale_price.AbsError" | Variable == "sale_price.APE") %>%
group_by(Regression, Variable) %>%
summarize(meanValue = mean(Value, na.rm = T)) %>%
spread(Variable, meanValue) %>%
kable()
st_drop_geometry(bothRegressions) %>%
gather(Variable, Value, -Regression, -zip_code) %>%
filter(Variable == "sale_price.AbsError" | Variable == "sale_price.APE") %>%
group_by(Regression, Variable) %>%
summarize(meanValue = mean(Value, na.rm = T)) %>%
spread(Variable, meanValue) %>%
kable()
st_join(bothRegressions, tracts17) %>%
group_by(Regression, raceContext) %>%
summarize(mean.MAPE = scales::percent(mean(SalePrice.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(raceContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood racial context")
st_join(bothRegressions, tracts20) %>%
group_by(Regression, raceContext) %>%
summarize(mean.MAPE = scales::percent(mean(SalePrice.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(raceContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood racial context")
st_join(bothRegressions, tracts20) %>%
group_by(Regression, raceContext) %>%
summarize(mean.MAPE = scales::percent(mean(sale_price.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(raceContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood racial context")
st_join(bothRegressions, tracts20) %>%
group_by(Regression, raceContext) %>%
summarize(mean.MAPE = scales::percent(mean(sale_price.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(raceContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood racial context")
st_join(bothRegressions, tracts20) %>%
group_by(Regression, raceContext) %>%
summarize(mean.MAPE = scales::percent(mean(sale_price.APE, na.rm = T))) %>%
st_drop_geometry() %>%
spread(raceContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood racial context")
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip_code) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = T)) %>%
ungroup() %>%
st_join(acsTractsPHL.2020) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .1) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
st_join(bothRegressions, tracts20) %>%
group_by(Regression, raceContext) %>%
summarize(mean.MAPE = scales::percent(mean(sale_price.APE, na.rm = TRUE))) %>%
st_drop_geometry() %>%
spread(raceContext, mean.MAPE) %>%
kable(caption = "Test set MAPE by neighborhood racial context", format = "markdown", align = "c", escape = FALSE, col.names = c("Racial Context", "Mean MAPE"))
st_drop_geometry(bothRegressions) %>%
group_by(Regression, zip_code) %>%
summarize(mean.MAPE = mean(sale_price.APE, na.rm = T)) %>%
ungroup() %>%
st_join(acsTractsPHL.2020) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = mean.MAPE)) +
geom_sf(data = bothRegressions, colour = "black", size = .1) +
facet_wrap(~Regression) +
scale_fill_gradient(low = palette5[1], high = palette5[5],
name = "MAPE") +
labs(title = "Mean test set MAPE by neighborhood") +
mapTheme()
